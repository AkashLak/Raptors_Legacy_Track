
import java.awt.Color;
import java.io.*;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author akash
 */
public class frmDataAndParallelArray extends javax.swing.JFrame {

    /**
     * Creates new form frmDataAndParallelArray
     */
    
    // Define constant variables for PlayOff Top 8
    final int TOPEIGHT = 8;
    
    // String variable declared to store the Input File name
    String filepath = "RaptorsHistory.txt";
    String tempFile = "temp1.txt";
    File oldFile = new File(filepath);
    
    // boolean variable declared to validate the File existance and File Format
    boolean File_Validity_Flag = false;
    
     //Declaring array variables of type integers, with size 50, to store Year, Wins, Loss, Home Wins, Home Loss, Away Wins, Away Loss and Playoff Ranking
    int [ ] Year_Array = new int[50];
    int [ ] Win_Array = new int[50];
    int [ ] Loss_Array = new int[50];
    int [ ] HomeWin_Array = new int[50];
    int [ ] HomeLoss_Array = new int[50];
    int [ ] AwayWin_Array = new int[50];
    int [ ] AwayLoss_Array = new int[50];
    int [ ] Ranking_Array = new int[50];
    
    //Declaring array variables of type String, with size 50, to store NBA Championship
    String [ ] NBA_Champion = new String[50];
    
        
    public frmDataAndParallelArray() {
        initComponents();
        
        // Calling ProgInit procedure, to clear Error Message label and Final message labels and make the Table invisible
        ProgInit();
        
        //Calling FileRead_to_ParallelArray routine to read data from the Input file and store in the Parallel Arrays      
        FileRead_to_ParallelArray();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroup = new javax.swing.ButtonGroup();
        lblErrMsg = new javax.swing.JLabel();
        lblMainTitle = new javax.swing.JLabel();
        lblInstruction1 = new javax.swing.JLabel();
        lblInstruction2 = new javax.swing.JLabel();
        rbtnDisplayAllData = new javax.swing.JRadioButton();
        rbtnTotalWin = new javax.swing.JRadioButton();
        rbtnTotalHomeWin = new javax.swing.JRadioButton();
        rbtnTotalAwayWin = new javax.swing.JRadioButton();
        rbtnPlayOffs = new javax.swing.JRadioButton();
        lblUserMessage = new javax.swing.JLabel();
        pantable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabAllData = new javax.swing.JTable();
        lblFinalOutput = new javax.swing.JLabel();
        rbtnChampionship = new javax.swing.JRadioButton();
        btnClearAll = new javax.swing.JButton();
        lblInstruction5 = new javax.swing.JLabel();
        lblInstruction6 = new javax.swing.JLabel();
        lblMainTitle1 = new javax.swing.JLabel();
        lblImage = new javax.swing.JLabel();
        btnUpdateRecord = new javax.swing.JButton();
        lblInstruction7 = new javax.swing.JLabel();
        lblInstruction8 = new javax.swing.JLabel();
        lblInstruction9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblErrMsg.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblErrMsg.setForeground(new java.awt.Color(255, 0, 0));
        lblErrMsg.setText("jLabel1");

        lblMainTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblMainTitle.setForeground(new java.awt.Color(102, 0, 102));
        lblMainTitle.setText("Data Management and Parallel Arrays");

        lblInstruction1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblInstruction1.setForeground(new java.awt.Color(51, 0, 51));
        lblInstruction1.setText("Instructions :");

        lblInstruction2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblInstruction2.setForeground(new java.awt.Color(51, 51, 51));
        lblInstruction2.setText("       1.  Raptors History covering last 25 years can be retrieved from File using \"Display All Data\"");

        btnGroup.add(rbtnDisplayAllData);
        rbtnDisplayAllData.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rbtnDisplayAllData.setForeground(new java.awt.Color(0, 0, 153));
        rbtnDisplayAllData.setText("Display All Data");
        rbtnDisplayAllData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnDisplayAllDataActionPerformed(evt);
            }
        });

        btnGroup.add(rbtnTotalWin);
        rbtnTotalWin.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rbtnTotalWin.setForeground(new java.awt.Color(0, 0, 153));
        rbtnTotalWin.setText("Total WIN Percentage");
        rbtnTotalWin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnTotalWinActionPerformed(evt);
            }
        });

        btnGroup.add(rbtnTotalHomeWin);
        rbtnTotalHomeWin.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rbtnTotalHomeWin.setForeground(new java.awt.Color(0, 0, 153));
        rbtnTotalHomeWin.setText("Home WIN Percentage");
        rbtnTotalHomeWin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnTotalHomeWinActionPerformed(evt);
            }
        });

        btnGroup.add(rbtnTotalAwayWin);
        rbtnTotalAwayWin.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rbtnTotalAwayWin.setForeground(new java.awt.Color(0, 0, 153));
        rbtnTotalAwayWin.setText("Away WIN Percentage");
        rbtnTotalAwayWin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnTotalAwayWinActionPerformed(evt);
            }
        });

        btnGroup.add(rbtnPlayOffs);
        rbtnPlayOffs.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rbtnPlayOffs.setForeground(new java.awt.Color(0, 0, 153));
        rbtnPlayOffs.setText("# of Playoffs Reached");
        rbtnPlayOffs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnPlayOffsActionPerformed(evt);
            }
        });

        lblUserMessage.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblUserMessage.setForeground(new java.awt.Color(255, 0, 0));
        lblUserMessage.setText("Choose your Pick to know more about Raptors History     :");

        tabAllData.setBackground(new java.awt.Color(204, 255, 204));
        tabAllData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Play Year", "# of WINS", "# of LOSS", "# of Home Wins", "# of Home Loss", "# of Away Wins", "# of Away Loss", "Ranking", "Champion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabAllData);

        javax.swing.GroupLayout pantableLayout = new javax.swing.GroupLayout(pantable);
        pantable.setLayout(pantableLayout);
        pantableLayout.setHorizontalGroup(
            pantableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pantableLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 943, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pantableLayout.setVerticalGroup(
            pantableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pantableLayout.createSequentialGroup()
                .addGap(0, 24, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        lblFinalOutput.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        lblFinalOutput.setForeground(new java.awt.Color(0, 102, 0));
        lblFinalOutput.setText("jLabel1");

        btnGroup.add(rbtnChampionship);
        rbtnChampionship.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rbtnChampionship.setForeground(new java.awt.Color(0, 0, 153));
        rbtnChampionship.setText("# of NBA Championship Won");
        rbtnChampionship.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnChampionshipActionPerformed(evt);
            }
        });

        btnClearAll.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnClearAll.setForeground(new java.awt.Color(255, 102, 0));
        btnClearAll.setText("CLEAR ALL");
        btnClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAllActionPerformed(evt);
            }
        });

        lblInstruction5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblInstruction5.setForeground(new java.awt.Color(51, 51, 51));
        lblInstruction5.setText("       2.  File Data would be read and stored in the Parallel arrays for calculation");

        lblInstruction6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblInstruction6.setForeground(new java.awt.Color(51, 51, 51));
        lblInstruction6.setText("       3.  User clicking rest of the Radio Buttons, will invoke internal calculation to retrieve/display the output");

        lblMainTitle1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblMainTitle1.setForeground(new java.awt.Color(102, 0, 102));
        lblMainTitle1.setText("- RAPTORS HISTORY");

        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/RaptorsEdit.png"))); // NOI18N

        btnUpdateRecord.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnUpdateRecord.setForeground(new java.awt.Color(255, 102, 0));
        btnUpdateRecord.setText("UPDATE RECORD(s)");
        btnUpdateRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateRecordActionPerformed(evt);
            }
        });

        lblInstruction7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblInstruction7.setForeground(new java.awt.Color(51, 51, 51));
        lblInstruction7.setText("       4.  RECORD DELETION - User can edit the PLAY YEAR for a record and change the value to 0. Click \"UPDATE RECORD\" ");

        lblInstruction8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblInstruction8.setForeground(new java.awt.Color(51, 51, 51));
        lblInstruction8.setText("       5.  RECORD ADDITION - User can add a new record at the end of the table by replacing \"0\" record. Click \"UPDATE RECORD\" ");

        lblInstruction9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblInstruction9.setForeground(new java.awt.Color(51, 51, 51));
        lblInstruction9.setText("       6.  RECORD MODIFY - User can modify any cell to update the record (NO NULL VALUES allowed). Click \"UPDATE RECORD\" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(lblUserMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbtnPlayOffs, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbtnTotalAwayWin, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbtnTotalHomeWin, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbtnDisplayAllData, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbtnTotalWin, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbtnChampionship)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(btnUpdateRecord)
                        .addGap(98, 98, 98)
                        .addComponent(btnClearAll, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addComponent(lblImage)
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMainTitle1)
                            .addComponent(lblMainTitle)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(lblErrMsg)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pantable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(lblFinalOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 845, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblInstruction8, javax.swing.GroupLayout.PREFERRED_SIZE, 829, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblInstruction1)
                            .addComponent(lblInstruction5)
                            .addComponent(lblInstruction6)
                            .addComponent(lblInstruction2)
                            .addComponent(lblInstruction7)
                            .addComponent(lblInstruction9, javax.swing.GroupLayout.PREFERRED_SIZE, 829, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(lblMainTitle)
                        .addGap(18, 18, 18)
                        .addComponent(lblMainTitle1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblImage)))
                .addGap(18, 18, 18)
                .addComponent(lblInstruction1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblInstruction2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblInstruction5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblInstruction6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblInstruction7, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInstruction8, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInstruction9, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(lblUserMessage))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rbtnDisplayAllData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbtnTotalWin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbtnTotalHomeWin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbtnTotalAwayWin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbtnPlayOffs)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbtnChampionship)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(lblFinalOutput)
                .addGap(18, 18, 18)
                .addComponent(lblErrMsg)
                .addGap(38, 38, 38)
                .addComponent(pantable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateRecord)
                    .addComponent(btnClearAll))
                .addGap(48, 48, 48))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Event would be triggered, when user clicks the Display All Data Radio Button
    private void rbtnDisplayAllDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnDisplayAllDataActionPerformed
        
        //Calling DisplayAllRecs subroutine, to display all the records read from the arrays, into the table
        DisplayAllRecs();
    }//GEN-LAST:event_rbtnDisplayAllDataActionPerformed
    
    /*
        DisplayAllRecs

        This method reads all the data from the arrays and outputs the data in the table

        Parameters  : NONE

        Returns     : NONE
    */
    public void DisplayAllRecs() {                                               
        
         //integer variable declared to store the LastValIndex, where Year is notcalculate TotalWins and TotalLoss
        int LastValIndex=0;
        
        //Performs the following checks only if File exists and File data is valid
        if (File_Validity_Flag == true)
        {
            //Initializing Error Message and Final Output labels and make the Panel that stores the Table visible      
            pantable.setVisible(true);
            //lblErrMsg.setText("");
            //lblFinalOutput.setText("");

            //Creates the model for the table to display the records
            DefaultTableModel model = (DefaultTableModel) tabAllData.getModel();
            Object rowData[] = new Object[9];
           
            model.setRowCount(0);

            //using for loop, to determine the last index that has Year value not equal to zero
            for (int i=0; i<Year_Array.length; i++)
            {
                if (Year_Array[i] == 0)
                {
                    LastValIndex = i;
                    break;
                }
            }

            //using for loop, to display the array details in the table
            for (int i=0; i<LastValIndex; i++)
            {
                rowData[0] = Year_Array[i];
                rowData[1] = Win_Array[i];
                rowData[2] = Loss_Array[i];
                rowData[3] = HomeWin_Array[i];
                rowData[4] = HomeLoss_Array[i];
                rowData[5] = AwayWin_Array[i];
                rowData[6] = AwayLoss_Array[i];
                rowData[7] = Ranking_Array[i];
                rowData[8] = NBA_Champion[i];

                model.addRow(rowData);
            }
            //creating additional record in the table with values of 0, to allow the user to add a record
            rowData[0] = 0;
            rowData[1] = 0;
            rowData[2] = 0;
            rowData[3] = 0;
            rowData[4] = 0;
            rowData[5] = 0;
            rowData[6] = 0;
            rowData[7] = 0;
            rowData[8] = "NO";

            model.addRow(rowData);
        }
    }
    
    //Event would be triggered, when user clicks the Total Win Percentage Radio Button
    private void rbtnTotalWinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnTotalWinActionPerformed
        
        //double variable declared to store TotalWinPerc
        double TotalWinPerc = 0;
        
        //integer variables declared to calculate TotalWins and TotalLoss
        int TotalWins = 0;
        int TotalLoss = 0;
        
        //Performs the following checks only if File exists and File data is valid
        if (File_Validity_Flag == true)
        {
            //using for loop, to read all data from the Win and Loss arrays. Calculate TotalWins and TotalLoss, to finalize TotalWinPerc
            for (int i=0;i<Year_Array.length;i++)
            {
                TotalWins = TotalWins + Win_Array[i];
                TotalLoss = TotalLoss + Loss_Array[i];
            }
            
            if ((TotalWins + TotalLoss) != 0)
            {
                TotalWinPerc = ((double)TotalWins / (double) (TotalWins + TotalLoss)) * 100;
            }
            else
            {
                TotalWinPerc = 0;
            }
                
            lblFinalOutput.setText("Based on Raptor's 25 Years of History, Total Win percentage is    : " + String.format("%.1f",TotalWinPerc) + " %");
        }
    }//GEN-LAST:event_rbtnTotalWinActionPerformed
    
    //Event would be triggered, when user clicks the Total Home Win Percentage Radio Button
    private void rbtnTotalHomeWinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnTotalHomeWinActionPerformed
            
        //double variable declared to store TotalHomeWinPerc
        double TotalHomeWinPerc = 0;
        
        //integer variables declared to calculate TotalWins and TotalLoss
        int TotalHomeWins = 0;
        int TotalHomeLoss = 0;
        
        //Performs the following checks only if File exists and File data is valid
        if (File_Validity_Flag == true)
        {
            //using for loop, to read all data from the HomeWin and HomeLoss arrays. Calculate TotalHomeWins and TotalHomeLoss, to finalize TotalHomeWinPerc
            for (int i=0;i<Year_Array.length;i++)
            {
                TotalHomeWins = TotalHomeWins + HomeWin_Array[i];
                TotalHomeLoss = TotalHomeLoss + HomeLoss_Array[i];
            }
            
            if ((TotalHomeWins + TotalHomeLoss) != 0)
            {
                TotalHomeWinPerc = ((double)TotalHomeWins / (double) (TotalHomeWins + TotalHomeLoss)) * 100;
            }
            else
            {
                TotalHomeWinPerc = 0;
            }

            lblFinalOutput.setText("Based on Raptor's 25 Years of History, Total Home Win percentage is    : " + String.format("%.1f",TotalHomeWinPerc) + " %");  
        }
    }//GEN-LAST:event_rbtnTotalHomeWinActionPerformed
    
    //Event would be triggered, when user clicks the Total Away Win Percentage Radio Button
    private void rbtnTotalAwayWinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnTotalAwayWinActionPerformed
        
        //double variable declared to store TotalAwayWinPerc
        double TotalAwayWinPerc = 0;
        
        //integer variables declared to calculate TotalWins and TotalLoss
        int TotalAwayWins = 0;
        int TotalAwayLoss = 0;
        
        //Performs the following checks only if File exists and File data is valid
        if (File_Validity_Flag == true)
        {
            //using for loop, to read all data from the AwayWin and AwayLoss arrays. Calculate TotalAwayWins and TotalAwayLoss, to finalize TotalAwayWinPerc
            for (int i=0;i<Year_Array.length;i++)
            {
                TotalAwayWins = TotalAwayWins + AwayWin_Array[i];
                TotalAwayLoss = TotalAwayLoss + AwayLoss_Array[i];
            }

            if ((TotalAwayWins + TotalAwayLoss) != 0)
            {
                TotalAwayWinPerc = ((double)TotalAwayWins / (double) (TotalAwayWins + TotalAwayLoss)) * 100;
            }
            else
            {
                TotalAwayWinPerc = 0;
            }
            
            lblFinalOutput.setText("Based on Raptor's 25 Years of History, Total Away Win percentage is    : " + String.format("%.1f",TotalAwayWinPerc) + " %");  
        }
    }//GEN-LAST:event_rbtnTotalAwayWinActionPerformed
    
    //Event would be triggered, when user clicks the Number of Playoff reached Radio Button
    private void rbtnPlayOffsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnPlayOffsActionPerformed
        
        
        //integer variables declared to calculate TotalPlayoffReached
        int TotalPlayoffReached = 0;
        int TotalYears = 0;
        
        //Performs the following checks only if File exists and File data is valid
        if (File_Validity_Flag == true)
        {
            //using for loop, to determine the last index that has Year value not equal to zero
            for (int i=0; i<Year_Array.length; i++)
            {
                if (Year_Array[i] == 0)
                {
                    TotalYears = i;
                    break;
                }
            }

            //using for loop, to read all data from the Ranking Array. Calculate TotalPlayoffsReached, if ranking is >= 8
            for (int j=0;j<TotalYears;j++)
            {
                if ((Ranking_Array[j] <= TOPEIGHT) && (Ranking_Array[j] != 0))
                {
                    TotalPlayoffReached = TotalPlayoffReached + 1;
                }
            }

            lblFinalOutput.setText("Based on Raptor's 25 Years of History, Total Playoffs reached is    : " + String.valueOf(TotalPlayoffReached) + " out of  " + TotalYears);
        }
    }//GEN-LAST:event_rbtnPlayOffsActionPerformed
    
    //Event would be triggered, when user clicks the Number of NBA Championship Won Radio Button
    private void rbtnChampionshipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnChampionshipActionPerformed
        
        //integer variables declared to calculate TotalPlayoffReached
        int TotalNBA_Championship = 0;
        int TotalYears = 0;
        
        //Performs the following checks only if File exists and File data is valid
        if (File_Validity_Flag == true)
        {
            //using for loop, to determine the last index that has Year value not equal to zero
            for (int i=0; i<Year_Array.length; i++)
            {
                if (Year_Array[i] == 0)
                {
                    TotalYears = i;
                    break;
                }
            }

            //using for loop, to read all data from the NBA Champion Array. Calculate TotalNBAChampionship by adding 1, if the string value is "YES"
            for (int j=0;j<TotalYears;j++)
            {
                if (NBA_Champion[j].toUpperCase().contains ("YES"))
                {
                    TotalNBA_Championship = TotalNBA_Championship + 1;
                }
            }

            lblFinalOutput.setText("Based on Raptor's 25 Years of History, Total NBA Championship WON is    : " + TotalNBA_Championship);
        }
    }//GEN-LAST:event_rbtnChampionshipActionPerformed
    
    //Event would be triggered, when user clicks the CLEAR ALL button
    private void btnClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAllActionPerformed
        
        //Performs the following checks only if File exists and File data is valid
        if (File_Validity_Flag == true)
        {
            //Setting blanks toError/Result labels
            lblErrMsg.setText("");
            lblFinalOutput.setText("");

            //Setting Panle/Table invisible
            pantable.setVisible(false);
            
            //Clearning the Radio button selection for the Button Group
            btnGroup.clearSelection();
            
            //Calling FileRead_to_ParallelArray routine to read data from the Input file and store in the Parallel Arrays
            FileRead_to_ParallelArray();
        }
    }//GEN-LAST:event_btnClearAllActionPerformed
    
    //Event would be triggered, when user clicks the UPDATE RECORD button
    private void btnUpdateRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateRecordActionPerformed
        
        //calls WriteOutputFile subroutine, to create/update the file, using the data from the table, after user has made the updates
        WriteOutputFile(tempFile);
    }//GEN-LAST:event_btnUpdateRecordActionPerformed
    
    
    /*
        FileRead_to_ParallelArray

        This method allows the User to read all the data from the input file and store the information in the Parallel Arrays defined

        Parameters  : NONE

        Returns     : NONE
    */
    public void FileRead_to_ParallelArray() {                                               
        
        //integer variable declared to keep track of linecount, while reading the data from the input file
        int linecount = 0;
        int arraylength;
        int LastValIndex = 0;
        int tempint = 0;
        String tempstr = "";
        
        File_Validity_Flag = false;
        arraylength = Year_Array.length;
          
        //Uses try and catch while reading each record from the Input file
        try
        {
            Scanner fr = new Scanner(new File(filepath));
            fr.useDelimiter("[,\n]");
            
            //When there is a valid record, saves each of the field (delimited by ",") in the integer format into the parallel arrays
            while (fr.hasNext())
            {
                Year_Array [linecount] = Integer.parseInt(fr.next());
                Win_Array [linecount] = Integer.parseInt(fr.next());
                Loss_Array [linecount] = Integer.parseInt(fr.next());
                HomeWin_Array [linecount] = Integer.parseInt(fr.next());
                HomeLoss_Array [linecount] = Integer.parseInt(fr.next());
                AwayWin_Array [linecount] = Integer.parseInt(fr.next());
                AwayLoss_Array [linecount] = Integer.parseInt(fr.next());
                Ranking_Array [linecount] = Integer.parseInt(fr.next());
                NBA_Champion [linecount] = fr.next();
                fr.next();
                
                linecount = linecount + 1;
            }
            File_Validity_Flag = true;
            fr.close();
            
            //clears the array elements, if the arraylength is greater than the table rowcount, to refresh the array data
            if (arraylength > linecount)
            {
                for (int j =linecount ; j<arraylength;j++)
                {
                    Year_Array [linecount] = 0;
                    Win_Array [linecount] = 0;
                    Loss_Array [linecount] = 0;
                    HomeWin_Array [linecount] = 0;
                    HomeLoss_Array [linecount] = 0;
                    AwayWin_Array [linecount] = 0;
                    AwayLoss_Array [linecount] = 0;
                    Ranking_Array [linecount] = 0;
                    NBA_Champion [linecount] = "";
                }
            }
            
            //sorting the values for all arrays
            
            //uses for loop, to determine the last index value, by reading all values in the Arr_StudRollNo array
            for (int i=0; i<Year_Array.length; i++)
            {
                if (Year_Array[i] == 0)
                {
                    LastValIndex = i;
                    break;
                }
            }

            //performs the sorting using Ascending order for the Arr_Sorted_StudAveMarks array
            for (int k=1; k<LastValIndex;k++)
            {
                for (int m=k; m > 0; m--)
                {
                    if (Year_Array[m] > Year_Array[m-1])
                    {
                        tempint = Year_Array[m];
                        Year_Array[m] = Year_Array[m-1];
                        Year_Array[m-1] = tempint;

                        tempint = Win_Array[m];
                        Win_Array[m] = Win_Array[m-1];
                        Win_Array[m-1] = tempint;

                        tempint = Loss_Array[m];
                        Loss_Array[m] = Loss_Array[m-1];
                        Loss_Array[m-1] = tempint;

                        tempint = HomeWin_Array[m];
                        HomeWin_Array[m] = HomeWin_Array[m-1];
                        HomeWin_Array[m-1] = tempint;

                        tempint = HomeLoss_Array[m];
                        HomeLoss_Array[m] = HomeLoss_Array[m-1];
                        HomeLoss_Array[m-1] = tempint;

                        tempint = AwayWin_Array[m];
                        AwayWin_Array[m] = AwayWin_Array[m-1];
                        AwayWin_Array[m-1] = tempint;

                        tempint = AwayLoss_Array[m];
                        AwayLoss_Array[m] = AwayLoss_Array[m-1];
                        AwayLoss_Array[m-1] = tempint;

                        tempint = Ranking_Array[m];
                        Ranking_Array[m] = Ranking_Array[m-1];
                        Ranking_Array[m-1] = tempint;

                        tempstr = NBA_Champion[m];
                        NBA_Champion[m] = NBA_Champion[m-1];
                        NBA_Champion[m-1] = tempstr; 
                    }
                }
            }   
        }
        catch (IOException e)
                {
                    lblErrMsg.setText("ERROR - File Not found. Create a new file 'RaptorsHistory.txt' and Try again");
                    File_Validity_Flag = false;
                }
        catch (NumberFormatException n)
                {
                    lblErrMsg.setText("ERROR - Bad Formatted data. Fix the Input file data 'RaptorsHistory.txt' and Try again");
                    File_Validity_Flag = false;
                }
    } 
    
    
    /*
        ProgInit

        This method allows the User to initialize all the Output value fields and Error message fields and makes the Table invisible

        Parameters  : NONE

        Returns     : NONE
    */
    public void ProgInit() {                                               
        
        //Setting blanks toError/Result labels
        lblErrMsg.setText("");
        lblFinalOutput.setText("");
        
        //Setting Panle/Table invisible
        pantable.setVisible(false);

    } 
    
    /*
        WriteOutputFile

        This method creates/updates the file, using the data from the table, after user has made the updates

        Parameters  : String

        Returns     : NONE
    */
    public void WriteOutputFile(String filename) {                                               
        
        File newFile = new File(filename);
        boolean tabcheck = true;
        String str1;
        int int1;
        
        try {
            FileWriter fw = new FileWriter(filename,true);
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(bw);
            
            DefaultTableModel model1 = (DefaultTableModel) tabAllData.getModel();
            
            //using for loop, checks whether there are blanks/null on all the cell values in the table and sets the error message "Bad Data"
            for (int i = 0; i < tabAllData.getRowCount(); i++)
            {   
                if ((model1.getValueAt(i, 0) == null) || (model1.getValueAt(i, 1) == null) || (model1.getValueAt(i, 2) == null) || (model1.getValueAt(i, 3) == null)|| (model1.getValueAt(i, 4) == null) || (model1.getValueAt(i, 5) == null) || (model1.getValueAt(i, 6) == null) || (model1.getValueAt(i, 7) == null) || (model1.getValueAt(i, 8) == null))
                {
                    lblErrMsg.setText("ERROR - Bad data keyed in the table. Fix the data and proceed OR CLEAR ALL");
                    tabcheck = false;
                    break;
                }
                
                //Validates for proper values in CHAMPION field
                str1 = ((String) model1.getValueAt(i, 8)).toUpperCase();
                if (!("NO".equals(str1)) && !("YES".equals(str1)))
                {
                    lblErrMsg.setText("ERROR - Value in CHAMPION field can only be 'NO' or 'YES'. Fix the data ad proceed OR CLEAR ALL");
                    tabcheck = false;
                    break;
                }
            }   

            //if the data in the table are valid, creates the temp file and writes all the data from the table. Deletes the oldfile and renames the temp file
            if (tabcheck == true)
            {
                for (int i = 0; i < tabAllData.getRowCount(); i++)
                {   
                    if ((int)model1.getValueAt(i, 0) != 0)
                    {
                        str1 = ((String) model1.getValueAt(i, 8)).toUpperCase();
                        pw.println(model1.getValueAt(i, 0)+","+model1.getValueAt(i, 1)+","+model1.getValueAt(i, 2)+","+model1.getValueAt(i, 3)+","+model1.getValueAt(i, 4)+","+model1.getValueAt(i, 5)+","+model1.getValueAt(i, 6)+","+model1.getValueAt(i, 7)+","+str1+","+"E");
                    }
                }
                lblFinalOutput.setText("Records updated SUCCESSFULLY.");
                pw.flush();
                pw.close();
                fw.close();
                oldFile.delete();
                File dump = new File(filepath);
                newFile.renameTo(dump);
                FileRead_to_ParallelArray();
                DisplayAllRecs();
                //Clearing the Radio button selection for the Button Group
                btnGroup.clearSelection();
            }
            else
            {
                pw.flush();
                pw.close();
                fw.close();
                newFile.delete();
                DisplayAllRecs();
                //Clearing the Radio button selection for the Button Group
                btnGroup.clearSelection();
            }
        }
        catch (IOException ex) {
            //Logger.getLogger(frmAddModDel.class.getName()).log(Level.SEVERE, null, ex);
            lblErrMsg.setText("ERROR - File ISSUE. Try again");
        }  
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmDataAndParallelArray.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmDataAndParallelArray.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmDataAndParallelArray.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmDataAndParallelArray.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmDataAndParallelArray().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearAll;
    private javax.swing.ButtonGroup btnGroup;
    private javax.swing.JButton btnUpdateRecord;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblErrMsg;
    private javax.swing.JLabel lblFinalOutput;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblInstruction1;
    private javax.swing.JLabel lblInstruction2;
    private javax.swing.JLabel lblInstruction5;
    private javax.swing.JLabel lblInstruction6;
    private javax.swing.JLabel lblInstruction7;
    private javax.swing.JLabel lblInstruction8;
    private javax.swing.JLabel lblInstruction9;
    private javax.swing.JLabel lblMainTitle;
    private javax.swing.JLabel lblMainTitle1;
    private javax.swing.JLabel lblUserMessage;
    private javax.swing.JPanel pantable;
    private javax.swing.JRadioButton rbtnChampionship;
    private javax.swing.JRadioButton rbtnDisplayAllData;
    private javax.swing.JRadioButton rbtnPlayOffs;
    private javax.swing.JRadioButton rbtnTotalAwayWin;
    private javax.swing.JRadioButton rbtnTotalHomeWin;
    private javax.swing.JRadioButton rbtnTotalWin;
    private javax.swing.JTable tabAllData;
    // End of variables declaration//GEN-END:variables
}
